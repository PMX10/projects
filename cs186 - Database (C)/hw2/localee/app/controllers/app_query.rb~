class AppQuery

  ################################
  #  DO NOT MODIFY THIS SECTION  #
  ################################

  attr_accessor :posts
  attr_accessor :users
  attr_accessor :user
  attr_accessor :locations
  attr_accessor :following_locations
  attr_accessor :location

  ###########################################
  #  TODO: Implement the following methods  #
  ###########################################

  # Purpose: Show all the locations being followed by the current user
  # Input:
  #   user_id - the user id of the current user
  # Assign: assign the following variables
  #   @following_locations - An array of hashes of location information.
  #                          Order does not matter.
  #                          Each hash should include:
  #     * :id - the location id
  #     * :name - the name of the location
  #     * :latitude - the latitude
  #     * :longitude - the longitude
  # Output: None
  def get_following_locations(user_id)
    @following_locations = []
    local_id = Follow.where("user_id = ?",user_id).select("location_id")
    lid = []
    i=0
    while i < local_id.count
       lid.concat([local_id[i].location_id])
       i+=1
    end
    if lid != []
       @following_locations = Location.find(lid)
    end
#return @following_locations
#    follow = Follow.where("user_id = ?",user_id)
#    locationID = follow.select("location_id")
#print locationID
   # @following_locations = Location.connection.select_all("
#	SELECT L.id, L.name, L.latitude, L.longitude 
#	FROM Locations L, Users U, Follows F
#	WHERE L.id = F.location_id AND F.user_id = U.id")
  end

  # Purpose: Show the information and all posts for a given location
  # Input:
  #   location_id - The id of the location for which to show the information and posts
  # Assign: assign the following variables
  #   @location - A hash of the given location. The hash should include:
  #     * :id - the location id
  #     * :name - the name of the location
  #     * :latitude - the latitude
  #     * :longitude - the longitude
  #   @posts - An array of hashes of post information, for the given location.
  #            Reverse chronological order by creation time (newest post first).
  #            Each hash should include:
  #     * :author_id - the id of the user who created this post
  #     * :author - the name of the user who created this post
  #     * :text - the contents of the post
  #     * :created_at - the time the post was created
  #     * :location - a hash of this post's location information. The hash should include:
  #         * :id - the location id
  #         * :name - the name of the location
  #         * :latitude - the latitude
  #         * :longitude - the longitude
  # Output: None
  def get_posts_for_location(location_id)
    @location = {}
    @location[:id] = Location.where("id=?",location_id).first.id
    @location[:name] = Location.where("id=?",location_id).first.name
    @location[:latitude] = Location.where("id=?",location_id).first.latitude
    @location[:longitude] = Location.where("id=?",location_id).first.longitude
    @posts = []
    num_post = Post.where("location_id = ?",location_id).count

    if num_post != 0
       i = 0
       posts_at_location = Post.where("location_id = ?",location_id)
       while i<num_post
          @posts.concat([{:author_id => posts_at_location[i].user_id,
		          :author => User.where("id = ?", posts_at_location[i].user_id)[0].name,
		          :text => posts_at_location[i].body,
		          :created_at => posts_at_location[i].created_at,
		          :location => @location }])
           i+=1
       end
    @posts.sort!{|x,y|y[:created_at]<=>x[:created_at]}
#print "@@@@@@@@@@@@@@"
#print @posts
    end

return @posts
  end

  # Purpose: Show the current user's stream of posts from all the locations the user follows
  # Input:
  #   user_id - the user id of the current user
  # Assign: assign the following variables
  #   @posts - An array of hashes of post information from all locations the current user follows.
  #            Reverse chronological order by creation time (newest post first).
  #            Each hash should include:
  #     * :author_id - the id of the user who created this post
  #     * :author - the name of the user who created this post
  #     * :text - the contents of the post
  #     * :created_at - the time the post was created
  #     * :location - a hash of this post's location information. The hash should include:
  #         * :id - the location id
  #         * :name - the name of the location
  #         * :latitude - the latitude
  #         * :longitude - the longitude
  # Output: None
  def get_stream_for_user(user_id)
    @posts = []
    user_posts = Post.where("user_id=?",user_id)
    num_posts = user_posts.count
    i = 0
    while i<num_posts 
    	location_id = user_posts[i].location_id
        if Follow.where("user_id =? and location_id =?",user_id,location_id) == [] then
           i+=1
           next
        end
    	location = {}
    	location[:id] = Location.where("id=?",location_id).first.id
    	location[:name] = Location.where("id=?",location_id).first.name
    	location[:latitude] = Location.where("id=?",location_id).first.latitude
    	location[:longitude] = Location.where("id=?",location_id).first.longitude
    
        user_id = user_posts[i].user_id
        @posts.concat([{:author_id => user_id,
                       :author => User.find(user_id).name,
                       :text => user_posts[i].body,
                       :created_at => user_posts[i].created_at,
                       :location => location}])
     i+=1
     end
     @posts.sort!{|x,y|y[:created_at]<=>x[:created_at]}
     return @posts
  end

  # Purpose: Retrieve the locations within a GPS bounding box
  # Input:
  #   nelat - latitude of the north-east corner of the bounding box
  #   nelng - longitude of the north-east corner of the bounding box
  #   swlat - latitude of the south-west corner of the bounding box
  #   swlng - longitude of the south-west corner of the bounding box
  #   user_id - the user id of the current user
  # Assign: assign the following variables
  #   @locations - An array of hashes of location information, which lie within the bounding box specified by the input.
  #                In increasing latitude order.
  #                At most 50 locations.
  #                Each hash should include:
  #     * :id - the location id
  #     * :name - the name of the location
  #     * :latitude - the latitude
  #     * :longitude - the longitude
  #     * :follows - true if the current user follows this location. false otherwise.
  # Output: None
  def get_nearby_locations(nelat, nelng, swlat, swlng, user_id)
    @locations = []
    location_in_box = Location.where("latitude >=? and longitude >=? and latitude <=? and longitude <=?",swlat,swlng,nelat,nelng)
    num_location = location_in_box.count
    i=0
    while i<num_location
       true_value = false
       j=0
       followed_user = Follow.where("location_id = ?",location_in_box[i].id).select("user_id")
       while j< followed_user.count
           if followed_user[j].user_id == user_id
		true_value = true
		break
	   end
       j+=1
       end
       @locations.concat([{:id=>location_in_box[i].id,
			   :name=>location_in_box[i].name,
			   :latitude=>location_in_box[i].latitude,
			   :longitude=>location_in_box[i].longitude,
			   :follows=>true_value}])
     i+=1
     end
  end

  # Purpose: Create a new location
  # Input:
  #   location_hash - A hash of the new location information.
  #                   The hash MAY include:
  #     * :name - the name of the location
  #     * :latitude - the latitude
  #     * :longitude - the longitude
  #     NOTE: Although the UI will always populate all these fields in this hash,
  #           we may use hashes with missing fields to test your schema/models.
  #           Your schema/models/code should prevent corruption of the database.
  # Assign: None
  # Output: true if the creation is successful, false otherwise
  def create_location(location_hash={})
    @location = Location.new(:name=>location_hash[:name],:latitude=>location_hash[:latitude],:longitude=>location_hash[:longitude])
    return @location.save
  end

  # Purpose: The current user follows a location
  # Input:
  #   user_id - the user id of the current user
  #   location_id - The id of the location the current user should follow
  # Assign: None
  # Output: None
  # NOTE: Although the UI will never call this method multiple times,
  #       we may call it multiple times to test your schema/models.
  #       Your schema/models/code should prevent corruption of the database.
  def follow_location(user_id, location_id)
      test = Follow.where("user_id=? and location_id =?",user_id,location_id)
      if test.first == nil
      	f = Follow.new({:user_id=>user_id,:location_id=>location_id})
      	f.save
      end
  end

  # Purpose: The current user unfollows a location
  # Input:
  #   user_id - the user id of the current user
  #   location_id - The id of the location the current user should unfollow
  # Assign: None
  # Output: None
  # NOTE: Although the UI will never call this method multiple times,
  #       we may call it multiple times to test your schema/models.
  #       Your schema/models/code should prevent corruption of the database.
  def unfollow_location(user_id, location_id)
      uf = Follow.where("user_id=? and location_id =?",user_id,location_id)
      uf[0].destroy
  end

  # Purpose: The current user creates a post to a given location
  # Input:
  #   user_id - the user id of the current user
  #   post_hash - A hash of the new post information.
  #               The hash may include:
  #     * :location_id - the id of the location
  #     * :text - the text of the posts
  #     NOTE: Although the UI will always populate all these fields in this hash,
  #           we may use hashes with missing fields to test your schema/models.
  #           Your schema/models/code should prevent corruption of the database.
  # Assign: None
  # Output: true if the creation is successful, false otherwise
  def create_post(user_id, post_hash={})
    @p = Post.new(:location_id=>post_hash[:location_id],:user_id=>user_id,:body=>post_hash[:text])
    return @p.save
    #false
  end

  # Purpose: Create a new user
  # Input:
  #   user_hash - A hash of the new post information.
  #               The hash may include:
  #     * :name - name of the new user
  #     * :email - email of the new user
  #     * :password - password of the new user
  #     NOTE: Although the UI will always populate all these fields in this hash,
  #           we may use hashes with missing fields to test your schema/models.
  #           Your schema/models/code should prevent corruption of the database.
  # Assign: assign the following variables
  #   @user - the new user object
  # Output: true if the creation is successful, false otherwise
  # NOTE: This method is already implemented, but you are allowed to modify it if needed.
  def create_user(user_hash={})
    @user = User.new(user_hash)
    @user.save
  end

  # Purpose: Get all the posts
  # Input: None
  # Assign: assign the following variables
  #   @posts - An array of hashes of post information.
  #            Order does not matter.
  #            Each hash should include:
  #     * :author_id - the id of the user who created this post
  #     * :author - the name of the user who created this post
  #     * :text - the contents of the post
  #     * :created_at - the time the post was created
  #     * :location - a hash of this post's location information. The hash should include:
  #         * :id - the location id
  #         * :name - the name of the location
  #         * :latitude - the latitude
  #         * :longitude - the longitude
  # Output: None
  def get_all_post
    puts "sdfasdsdfsaf"
    @posts = []
    num_posts = Post.count
    i = 1
    while i<=num_posts 
    	location_id = Post.find(i).location_id
    	location = {}
    	location[:id] = Location.where("id=?",location_id).first.id
    	location[:name] = Location.where("id=?",location_id).first.name
    	location[:latitude] = Location.where("id=?",location_id).first.latitude
    	location[:longitude] = Location.where("id=?",location_id).first.longitude
 
        user_id = Post.find(i).user_id
        @posts.concat([{:author_id => user_id,
                       :author => User.find(user_id).name,
                       :text => Post.find(i).body,
                       :created_at => Post.find(i).created_at,
                      :location => location}])
     i+=1
     end
    #return @posts
  #  @posts = ActiveRecord::Base.connection.execute("
  #      SELECT P.user_id AS 
#	SELECT L.id,L.name,L.latitude,L.longitude
#	FROM Locations L, Posts P
#	WHERE id = P.location_id")
  #  locations
  end

  # Purpose: Get all the users
  # Input: None
  # Assign: assign the following variables
  #   @users - An array of hashes of user information.
  #            Order does not matter.
  #            Each hash should include:
  #     * :id - id of the user
  #     * :name - name of the user
  #     * :email - email of th user
  # Output: None
  def get_all_users
    @users = []
    #i=1
    #while i<=User.count
    #   @users.concat([{:id=>User.find(i).id,
    #                 :name=>User.find(i).name,
    #                 :email=>User.find(i).email}])
    #i+=1
    #end
    @users = User.connection.select_all("SELECT id,name,email FROM Users")
  end

  # Purpose: Get all the locations
  # Input: None
  # Assign: assign the following variables
  #   @locations - An array of hashes of location information.
  #                Order does not matter.
  #                Each hash should include:
  #     * :id - the location id
  #     * :name - the name of the location
  #     * :latitude - the latitude
  #     * :longitude - the longitude
  # Output: None
  def get_all_locations
    @locations = []
    #i=1
    #while i<=Location.count
    #   @locations.concat([{:id=>Location.find(i).id,
    #                 :name=>Location.find(i).name,
    #                 :latitude=>Location.find(i).latitude,
    #                 :longitude=>Location.find(i).longitude}])
    #i+=1
    #end
    @locations = Location.connection.select_all("SELECT id,name,latitude,longitude FROM Locations")
#return @locations
  end

  # Retrieve the top 5 users who created the most posts.
  # Retrieve at most 5 rows.
  # Returns a string of the SQL query.
  # The resulting columns names must include (but are not limited to):
  #   * name - name of the user
  #   * num_posts - number of posts the user has created
  def top_users_posts_sql
	"SELECT *
	FROM 
		(SELECT U.name AS name, COUNT(*) AS num_posts 
		FROM users U, posts P 
		WHERE U.id = P.user_id 
		GROUP BY U.id)
	ORDER BY num_posts DESC 
	LIMIT 5"
  end

  # Retrieve the top 5 locations with the most unique posters. Only retrieve locations with at least 2 unique posters.
  # Retrieve at most 5 rows.
  # Returns a string of the SQL query.
  # The resulting columns names must include (but are not limited to):
  #   * name - name of the location
  #   * num_users - number of unique users who have posted to the location
  def top_locations_unique_users_sql
	"SELECT L.name AS name, nu AS num_users
	FROM 
		(SELECT lid, count(puid) AS nu 
		FROM 
			(SELECT DISTINCT  L.id AS lid, P.user_id AS puid 
			FROM locations L, posts P 
			WHERE L.id = P.location_id) 
		GROUP BY lid 
		ORDER BY COUNT(puid) DESC 
		LIMIT 5),locations L
	WHERE L.id = lid AND nu > 1"
  end

  # Retrieve the top 5 users who follow the most locations, where each location has at least 2 posts
  # Retrieve at most 5 rows.
  # Returns a string of the SQL query.
  # The resulting columns names must include (but are not limited to):
  #   * name - name of the user
  #   * num_locations - number of locations (has at least 2 posts) the user follows
  def top_users_locations_sql
"""select U.name,num_locations
from
(SELECT DISTINCT UID ,COUNT(LID) as num_locations 
FROM 
	(SELECT P.user_id AS UID,P.location_id AS LID,COUNT(*) AS NPOST 
	FROM 
		(SELECT P.user_id,P.location_id, P.body 
		FROM Follows F,Posts P 
		WHERE P.user_id = F.user_id AND P.location_id = F.location_id) AS P  
	GROUP BY P.user_id,P.location_id
	HAVING COUNT(*)>1)
GROUP BY UID), Users U
WHERE U.id = UID
ORDER BY num_locations DESC
LIMIT 5"""

"
select U.name AS name, nl as num_locations
from
(SELECT F.user_id AS uid, COUNT(F.location_id) AS nl
FROM(SELECT L.id AS LID, COUNT(*) FROM Locations L, Posts P WHERE L.id = P.location_id GROUP BY L.id HAVING COUNT(*)>1),Follows F
WHERE F.location_id = LID
GROUP BY F.user_id), Users U
WHERE U.id = uid
ORDER BY num_locations DESC
LIMIT 5"
		
  end

end
